OOPS : object-oriented-programming system

A programming paradigm that uses objects and classes to design and implement software solutions.


Key concepts in OOPS in Java

1) Class
2) Object
3) Encapsulation
4) Inheritance
5) Polymorphism
6) Abstraction

Class:
A class is blueprint for creating objects.
It define the structure (field) and behaviour (methods) of objects.

example:
class Car { //class
String color = "red"; //field
    void drive() //method
    {
    System.out,println("Engine is on");
    }
}

Object :
Its instance of class . It an real-world entity.

example:
Car myCar = new Car ();
myCar.color = "Red";
myCar.drive();


Encapsulation:
It is the practice of bundling data (field) and methods (functions) that operate on the data into single unit (class).
It also involves restricting direct access to some components using access modifiers (e.g., private, protected).

Inheritance:
Inheritance allows a class to acquire properties and methods of another class.
It supports code reusability.

1) Single
2) Multilevel
3) Hierarchical

java does not support multiple inheritance



Polymorphism:
Poly means many
morphism means forms

Polymorphism allows method to perform different tasks based on the object that calls them.

It can be achieved by via:
1)Runtime Polymorphism (Method Overiding)
2)Compile-time Polymorphism (Method Overloading)

Method Overloading
(compile time polymorphism)

Method overloading in java is a feature that allows a class
to have multiple methods with the same name but different parameter lists.
It enables a method to perform different tasks depending on the arguments passed to it.

Method overiding
(run time polymorphism)

Run time polymorphism is achieved through method overiding where
a subclass provides a specific implementation of a method already defined in its parent class.
The method to be called is determined at runtime based on the object.


Abstraction:
It focuses on showing only essential details while hiding the implementation.
It is achieved through abstract classes and interfaces.

Abstract class;
Declared using abstract keyword
can include both abstract methods (methods without body)
and concrete methods(methods with a body)
cannot be instantiated directly
acts as a blueprint for subclasses, which must implement the abstract method.





